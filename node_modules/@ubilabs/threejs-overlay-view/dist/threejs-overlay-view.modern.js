import{Vector3 as e,MathUtils as t,Vector2 as r,Raycaster as n,PerspectiveCamera as i,WebGL1Renderer as s,Scene as a,HemisphereLight as o,DirectionalLight as l,Matrix4 as h}from"three";function c(){return(c=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n])}return e}).apply(this,arguments)}const{sin:d,cos:u,pow:g,sqrt:p,atan2:y,asin:w,sign:v}=Math,{degToRad:f,radToDeg:m,euclideanModulo:x}=t;function b(e,t){const{lat:r,lng:n}=e,{lat:i,lng:s}=t,a=f(i-r),o=f(s-n),l=f(r),h=f(i),c=g(d(a/2),2)+g(d(o/2),2)*u(l)*u(h);return 2*y(p(c),p(1-c))*6371008.8}const A=new h;function P(e){return(...t)=>{try{return e(...t)}catch(e){throw console.error(e),e}}}export default class{constructor(e){this.overlay=void 0,this.camera=void 0,this.renderer=void 0,this.scene=void 0,this.referencePoint=void 0,this.viewportSize=new r,this.raycaster=new n,this.onAdd=null,this.onRemove=null,this.update=null,this.referencePoint=c({altitude:0},e),this.overlay=this.initWebGLOverlayView(),this.renderer=null,this.scene=this.initScene(),this.camera=new i}setMap(e){this.overlay.setMap(e)}setReferencePoint(e){this.referencePoint=c({altitude:0},e)}getScene(){return this.scene}getViewportSize(){return this.viewportSize}requestRedraw(){this.overlay.requestRedraw()}raycast(e,t=null,r={updateMatrix:!0,recursive:!1}){let{updateMatrix:n,recursive:i,raycasterParameters:s}=r;n&&A.copy(this.camera.projectionMatrix).invert(),this.raycaster.ray.origin.set(e.x,e.y,0).applyMatrix4(A),this.raycaster.ray.direction.set(e.x,e.y,.5).applyMatrix4(A).sub(this.raycaster.ray.origin).normalize();let a=this.raycaster.params;s&&(this.raycaster.params=s),null===t&&(t=this.scene,i=!0);const o=Array.isArray(t)?this.raycaster.intersectObjects(t,i):this.raycaster.intersectObject(t,i);return this.raycaster.params=a,o}latLngAltToVector3(t,r=new e){return function(t,r,n=new e){const i=b(r,{lng:t.lng,lat:r.lat}),s=b(r,{lng:r.lng,lat:t.lat}),a=v(t.lng-r.lng),o=v(t.lat-r.lat),{altitude:l=0}=t;return n.set(a*i,o*s,l)}(t,this.referencePoint,r)}vector3ToLatLngAlt(e,t={lat:0,lng:0,altitude:0}){return function(e,t,r={lat:0,lng:0,altitude:0}){return function(e,t,r,n={lat:0,lng:0}){const i=f(e.lng),s=f(e.lat),a=f(r),o=t/6371008.8,l=w(d(s)*u(o)+u(s)*d(o)*u(a)),h=i+y(d(a)*d(o)*u(s),u(o)-d(s)*d(l));n.lat=m(l),n.lng=m(h)}(t,e.length(),function(e){return x(90-m(y(e.y,e.x)),360)}(e),r),r.altitude=e.z,r}(e,this.referencePoint,t)}onContextRestored(e){const{gl:t}=e;let r=new s(c({canvas:t.canvas,context:t},t.getContextAttributes()));r.autoClear=!1,r.autoClearDepth=!1;const{width:n,height:i}=t.canvas;this.viewportSize.set(n,i),this.renderer=r}onContextLost(){this.renderer&&(this.viewportSize.set(0,0),this.renderer.dispose(),this.renderer=null)}onDraw(e){const{gl:t,transformer:r}=e;if(!this.scene||!this.renderer)return;if(null===this.overlay.getMap())return;this.camera.projectionMatrix.fromArray(r.fromLatLngAltitude(this.referencePoint));const{width:n,height:i}=t.canvas;this.viewportSize.set(n,i),this.renderer.setViewport(0,0,n,i),this.update&&this.update(),this.renderer.render(this.scene,this.camera),this.renderer.resetState()}initScene(){const e=new a,t=new o(16777215,4473924,1);t.position.set(0,-.2,1).normalize();const r=new l(16777215);return r.position.set(0,10,100),e.add(t,r),e}initWebGLOverlayView(){if(!google||!google.maps)throw new Error("Google Maps API not loaded. Please make sure to create the overlay after the API has been loaded.");if(!google.maps.WebGLOverlayView)throw new Error("WebGLOverlayView not found. Please make sure to load the beta-channel of the Google Maps API.");const e=new google.maps.WebGLOverlayView;return e.onAdd=P(()=>{null!==this.onAdd&&this.onAdd()}),e.onRemove=P(()=>{null!==this.onRemove&&this.onRemove()}),e.onDraw=P(this.onDraw.bind(this)),e.onContextRestored=P(this.onContextRestored.bind(this)),e.onContextLost=P(this.onContextLost.bind(this)),e}}
//# sourceMappingURL=threejs-overlay-view.modern.js.map
